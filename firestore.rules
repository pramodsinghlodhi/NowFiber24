
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.role == 'Admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Only the authenticated owner can read or write their own user profile.
      // Admins can create and update users via backend functions, but not directly list them.
      allow read, update: if isOwner(userId) || isAdmin();
      allow create, list: if isAdmin();
    }

    // Rules for the 'technicians' collection
    match /technicians/{techId} {
      // Any authenticated user can read technician info (for maps, etc.)
      allow read, list: if isAuth(); 
      // Only Admins can create, update, or delete technician records.
      allow write: if isAdmin();
    }
    
    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
      // Admins can read/write any task.
      allow read, write: if isAdmin();
      
      // A non-admin can only query (list) tasks if they are filtering by their own UID.
      // This is the key rule to prevent the permission-denied error for technicians.
      allow list: if isAuth() && request.query.where.to_list()[0][1] == 'tech_id' && request.query.where.to_list()[0][2] == request.auth.uid;
    }

    // Rules for shared information collections
    match /infrastructure/{deviceId} {
      allow read, list: if isAuth();
      allow write: if isAdmin();
    }
    
    match /connections/{connId} {
      allow read, list: if isAuth();
      allow write: if isAdmin();
    }
    
    match /alerts/{alertId} {
       allow read, list: if isAuth();
       allow write: if isAdmin();
    }

    match /materials/{materialId} {
      allow read, list: if isAuth();
      allow write: if isAdmin();
    }

    // Rules for user-specific sub-collections or related data
     match /assignments/{assignmentId} {
      allow create: if isAuth(); // Technicians can create requests.
      allow read, update, delete, list: if isAdmin();
      allow list: if isAuth() && request.query.where.to_list()[0][1] == 'technicianId' && request.query.where.to_list()[0][2] == request.auth.uid;
    }

     match /referrals/{referralId} {
        allow create: if isAuth();
        allow read, update, delete, list: if isAdmin();
        allow list: if isAuth() && request.query.where.to_list()[0][1] == 'tech_id' && request.query.where.to_list()[0][2] == request.auth.uid;
    }

    // Rules for public or semi-public data
    match /contacts/{contactId} {
      allow create: if true; // Anyone can submit the contact form.
      allow read, list, update, delete: if isAdmin(); // Only admins can manage submissions.
    }
    
    match /settings/{settingId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
