
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && request.auth.token.role == 'Admin';
    }

    // A user can only access their own user document
    match /users/{userId} {
      allow read: if isAuth() && request.auth.uid == userId;
      allow write: if isAdmin();

      // Notifications are a subcollection of users
      match /notifications/{notificationId} {
        allow read, write, delete: if isAuth() && request.auth.uid == userId;
        // Allow the owner of the notifications to list their own notifications
        allow list: if isAuth() && request.auth.uid == userId;
      }
    }

    // Admins can manage technicians. Technicians can read their own document.
    match /technicians/{techId} {
      allow read: if isAuth();
      allow list: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Admins can manage tasks. Technicians can query their own tasks and update them.
    match /tasks/{taskId} {
      allow get: if isAuth();
      // Allow a list query if it's an admin OR if the query is filtering by the user's own tech_id
      allow list: if isAdmin() || (isAuth() && request.query.where['tech_id'] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isAuth() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);
    }
    
    // Admins can manage everything else. Authenticated users can read most things.
    match /{collection}/{docId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
  }
}
