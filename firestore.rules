rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an Admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Helper function to check if a user is a Technician
    function isTechnician() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';
    }
    
    // Helper function to check if the request is from the user themselves
    function requestIsFromUser(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection:
    // Admins can read/write all user profiles.
    // Authenticated users can only read their own profile.
    match /users/{userId} {
      allow read: if request.auth != null && (isAdmin() || requestIsFromUser(userId));
      allow write: if isAdmin();
    }
    
    // Technicians collection:
    // Admins can read/write all.
    // Authenticated users (Admins and Technicians) can read all technician data (e.g., for lists, maps).
    match /technicians/{techId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow write: if isAdmin();
    }

    // Infrastructure, Connections, and Plans collections:
    // These represent the core network map data.
    // Admins can manage this data. Technicians need to read it for map display and tracing.
    match /infrastructure/{deviceId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow write: if isAdmin();
    }
    
    match /connections/{connId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow write: if isAdmin();
    }
    
    match /plans/{planId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow write: if isAdmin();
    }
    
    // Alerts collection:
    // Admins can manage all alerts.
    // Technicians can read all alerts.
    // The AI flow (authenticated user) must be able to create alerts.
    match /alerts/{alertId} {
      allow read: if request.auth != null && (isAdmin() || isTechnician());
      allow create: if request.auth != null; // Allows AI flow to create alerts
      allow update, delete: if isAdmin();
    }
    
    // Tasks collection:
    // Admins can read/write all tasks.
    // Technicians can read all tasks (to see team workload) but can only update their own.
    match /tasks/{taskId} {
      allow read: if request.auth != null && (isAdmin() || isTechnician());
      allow create: if isAdmin();
      allow update: if isAdmin() || (isTechnician() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);
      allow delete: if isAdmin();
    }
    
    // Materials and Assignments:
    // Admins can manage all materials and assignments.
    // Technicians need to read materials list and can create new assignment requests.
    match /materials/{materialId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow write: if isAdmin();
    }
    
    match /assignments/{assignmentId} {
        allow read: if request.auth != null && (isAdmin() || isTechnician());
        allow create: if isTechnician();
        allow update, delete: if isAdmin();
    }
    
    // Referrals collection:
    // Admins can manage all referrals.
    // Technicians can read their own referrals and create new ones.
    match /referrals/{referralId} {
      allow read: if request.auth != null && (isAdmin() || resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);
      allow create: if isTechnician();
      allow update, delete: if isAdmin();
    }
  }
}
