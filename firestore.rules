rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin by looking at a custom claim
    function isAdmin() {
      return request.auth.token.isAdmin == true;
    }

    // Helper function to check if user is a technician
    function isTechnician() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';
    }
    
    // Helper function to check resource ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users: Admins can manage all users. Users can read their own profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }

    // Technicians: Admins can manage. Technicians can read all and update their own status/location.
    match /technicians/{techId} {
      allow read: if request.auth != null;
      allow create, delete: if isAdmin();
      // A technician can update their own document if the techId matches their custom ID from their user profile
      allow update: if isAdmin() || (isTechnician() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == techId);
    }
    
    // Tasks: Authenticated users can read/create. Admins can update/delete.
    match /tasks/{taskId} {
      allow read, create: if request.auth != null;
      allow update, delete: if isAdmin();
    }
    
    // Infrastructure: Authenticated users can read. Admins can manage fully. Technicians can create.
    match /infrastructure/{deviceId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }
    
    // Other collections: Generally readable by authenticated users, writeable by Admins.
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
