[debug] [2025-08-04T07:55:59.968Z] ----------------------------------------------------------------------
[debug] [2025-08-04T07:55:59.971Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/fsdlxfaxdgx27856x49qycgdsyx5jxd3-firebase-tools-14.11.2/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-08-04T07:55:59.972Z] CLI Version:   14.11.2
[debug] [2025-08-04T07:55:59.972Z] Platform:      linux
[debug] [2025-08-04T07:55:59.972Z] Node Version:  v20.19.1
[debug] [2025-08-04T07:55:59.972Z] Time:          Mon Aug 04 2025 07:55:59 GMT+0000 (Coordinated Universal Time)
[debug] [2025-08-04T07:55:59.972Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-08-04T07:56:01.530Z] openjdk version "21.0.7" 2025-04-15
OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-08-04T07:56:01.585Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-08-04T07:56:01.631Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-08-04T07:56:01.638Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-08-04T07:56:01.728Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-08-04T07:56:01.730Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-08-04T07:56:01.733Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/n1m2a7x1hx6vgvmanjin6yd0b16nafz0-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/n1m2a7x1hx6vgvmanjin6yd0b16nafz0-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-08-04T07:56:06.101Z] Aug 04, 2025 7:56:06 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 7:56:06 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-08-04T07:56:06.165Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2025-08-04T07:56:06.170Z] 127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-08-04T07:56:06.287Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2025-08-04T08:33:51.610Z] Aug 04, 2025 8:33:51 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 8:33:51 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T08:33:51.686Z] Aug 04, 2025 8:33:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 8:33:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-04T08:33:52.152Z] Aug 04, 2025 8:33:52 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 8:33:52 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T08:33:52.251Z] Aug 04, 2025 8:33:52 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403032d66ed3cc30263348a24b0027c
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 8:33:52 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403032d66ed3cc30263348a24b0027c\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T08:34:13.506Z] Aug 04, 2025 8:34:13 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 8:34:13 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-04T09:00:32.885Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-04T09:00:32.892Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n    \n    function isTechnician() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';\n    }\n    \n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n      allow create: if isAdmin();\n      allow delete: if isAdmin();\n    }\n    \n    match /technicians/{techId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n    }\n    \n    match /tasks/{taskId} {\n      allow read: if isSignedIn();\n      allow update(diff, resource): if (\n        (isTechnician() && diff.onlyAffects(['status'])) ||\n        (isAdmin() && diff.onlyAffects(['tech_id']))\n      );\n      allow create, delete: if isAdmin();\n    }\n\n    match /alerts/{alertId} {\n        allow read: if isSignedIn();\n        allow create, write, delete: if isAdmin();\n    }\n    \n    match /infrastructure/{deviceId} {\n        allow read: if isSignedIn();\n        allow create, write, delete: if isAdmin();\n    }\n    \n    match /connections/{connectionId} {\n        allow read: if isSignedIn();\n        allow create, write, delete: if isAdmin();\n    }\n\n    match /materials/{materialId} {\n        allow read: if isSignedIn();\n        allow create, write, delete: if isAdmin();\n    }\n\n    match /assignments/{assignmentId} {\n        allow read: if isSignedIn();\n        // Technicians can create requests, admins can update/approve them\n        allow create: if isTechnician();\n        allow update: if isAdmin();\n        allow delete: if isAdmin();\n    }\n\n    match /referrals/{referralId} {\n        allow read: if isSignedIn();\n        allow create: if isTechnician();\n        allow update: if isAdmin();\n    }\n    \n     match /plans/{planId} {\n        allow read: if isSignedIn();\n        allow create, write, delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-04T09:00:32.915Z] Aug 04, 2025 9:00:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:00:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-04T09:00:33.254Z] Aug 04, 2025 9:00:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:00:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-08-04T09:00:35.010Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-04T09:00:35.011Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":33,"column":19,"currentOffset":813,"endOffset":813},"description":"Unexpected '('.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:33:19 - ERROR Unexpected '('. 
[info] ✔  firestore: Rules updated. 
[debug] [2025-08-04T09:07:59.259Z] Aug 04, 2025 9:07:59 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:07:59 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-04T09:13:17.977Z] Aug 04, 2025 9:13:17 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:13:17 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T09:13:18.005Z] Aug 04, 2025 9:13:17 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:13:17 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T09:13:18.145Z] Aug 04, 2025 9:13:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Aug 04, 2025 9:13:18 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403034b9667ae3b069c7a2bef466144
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:13:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nAug 04, 2025 9:13:18 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403034b9667ae3b069c7a2bef466144\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T09:13:19.755Z] Aug 04, 2025 9:13:19 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:13:19 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-04T09:39:28.884Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-04T09:39:28.890Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Helper function to check if the requesting user is an Admin\n    function isAdmin() {\n      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n\n    // Helper function to get the requesting user's custom ID (e.g., 'tech-001')\n    function getRequestingUserCustomId() {\n        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n    }\n\n    // Users can read and update their own user document. Admins can manage all user docs.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && (request.auth.uid == userId || isAdmin());\n      allow create, delete: if isAdmin();\n    }\n\n    // Admins can manage technicians. Any authenticated user can read the technician list.\n    match /technicians/{techId} {\n      allow read: if request.auth != null;\n      allow create, update, delete: if isAdmin();\n    }\n    \n    // Admins can manage inventory. Authenticated users can read.\n    match /infrastructure/{deviceId} {\n      allow read: if request.auth != null;\n      allow create, update, delete: if isAdmin();\n    }\n    \n    // Admins can manage connections. Authenticated users can read.\n    match /connections/{connectionId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Admins can read all tasks. Technicians can only read tasks assigned to them.\n    // Admins can create/update/delete tasks. Technicians can update their own tasks.\n    match /tasks/{taskId} {\n      allow read: if request.auth != null && (isAdmin() || resource.data.tech_id == getRequestingUserCustomId());\n      allow create, delete: if isAdmin();\n      allow update: if request.auth != null && (isAdmin() || resource.data.tech_id == getRequestingUserCustomId());\n    }\n\n    // Admins can read/write all alerts. Technicians can read all alerts.\n    match /alerts/{alertId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Admins can manage materials. Any authenticated user can read the materials list.\n    match /materials/{materialId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Admins can manage assignments. Technicians can create (request) and read their own assignments.\n    match /assignments/{assignmentId} {\n        allow read: if request.auth != null && (isAdmin() || resource.data.technicianId == getRequestingUserCustomId());\n        allow create: if request.auth != null; // Allows both admins and techs to create\n        allow update, delete: if isAdmin();\n    }\n\n    // Admins can manage referrals. Technicians can create and read their own referrals.\n    match /referrals/{referralId} {\n        allow read: if request.auth != null && (isAdmin() || resource.data.tech_id == getRequestingUserCustomId());\n        allow create: if request.auth != null;\n        allow update, delete: if isAdmin();\n    }\n    \n    // Plans can only be managed by Admins.\n    match /plans/{planId} {\n        allow read, write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-04T09:39:28.916Z] Aug 04, 2025 9:39:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:39:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-04T09:39:29.022Z] Aug 04, 2025 9:39:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:39:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-08-04T09:39:29.585Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-04T09:39:29.593Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-08-04T09:40:21.230Z] Aug 04, 2025 9:40:21 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:40:21 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-04T09:47:33.044Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-04T09:47:33.051Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check if a user has the 'Admin' role.\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n    \n    // Helper function to check if a user is a 'Technician'.\n    function isTechnician() {\n        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';\n    }\n    \n    // Helper function to get the custom user ID (e.g., 'tech-001') from their UID.\n    function getUserId() {\n        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n    }\n\n    // Users can only read their own data. Admins can read anyone's data for management purposes.\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      // Only admins can block/unblock users. Users cannot edit their own roles.\n      allow update: if isAdmin();\n      // Prevent users from being created/deleted directly from the client. This should be handled by a secure backend or Firebase Authentication triggers.\n      allow create, delete: if false;\n    }\n    \n    match /technicians/{techId} {\n      // Admins can manage all technicians. Technicians can view their own profile.\n      allow read: if isAdmin() || (isTechnician() && getUserId() == techId);\n      // Only Admins can create, update, or delete technician profiles.\n      allow write: if isAdmin();\n    }\n    \n    match /tasks/{taskId} {\n      // Admins can read all tasks. Technicians can read tasks assigned to them.\n      allow read: if isAdmin() || (isTechnician() && resource.data.tech_id == getUserId());\n      // Admins can create and update (reassign) tasks. Technicians cannot create tasks directly.\n      allow create, update: if isAdmin();\n      allow delete: if isAdmin();\n    }\n    \n    match /alerts/{alertId} {\n      // All authenticated users can read alerts. This is needed for map displays and lists.\n      allow read: if request.auth != null;\n      // Alerts are created by a trusted server/AI process, not directly by clients.\n      allow write: if isAdmin(); \n    }\n    \n    match /infrastructure/{deviceId} {\n      // All authenticated users can read infrastructure data for map display.\n      allow read: if request.auth != null;\n      // Only Admins can manage the network infrastructure.\n      allow write: if isAdmin();\n    }\n    \n    match /connections/{connId} {\n       // All authenticated users can read connection data for map display.\n       allow read: if request.auth != null;\n       allow write: if isAdmin();\n    }\n\n    match /materials/{materialId} {\n        // Admins can manage materials. Technicians can view the list of available materials.\n        allow read: if request.auth != null;\n        allow write: if isAdmin();\n    }\n    \n    match /assignments/{assignmentId} {\n        // Admins can read all assignments. Technicians can read their own.\n        allow read: if isAdmin() || (isTechnician() && resource.data.technicianId == getUserId());\n        // Admins can manage all assignments. Technicians can create new 'Requested' assignments.\n        allow create: if isTechnician();\n        allow update, delete: if isAdmin();\n    }\n    \n    match /referrals/{referralId} {\n        // Admins can read all referrals. Technicians can read their own.\n        allow read: if isAdmin() || (isTechnician() && resource.data.tech_id == getUserId());\n        // Technicians can create referrals. Admins can update their status.\n        allow create: if isTechnician();\n        allow update: if isAdmin();\n        allow delete: if isAdmin();\n    }\n    \n    match /plans/{planId} {\n       // Allow authenticated users to read plan data. This is needed for map popups.\n       allow read: if request.auth != null;\n       allow write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-04T09:47:33.071Z] Aug 04, 2025 9:47:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 9:47:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-04T09:47:33.462Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-04T09:47:33.466Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-08-04T10:02:52.084Z] Aug 04, 2025 10:02:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Aug 04, 2025 10:02:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:02:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nAug 04, 2025 10:02:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T10:02:52.102Z] Aug 04, 2025 10:02:52 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:02:52 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T10:02:52.171Z] Aug 04, 2025 10:02:52 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303bf5efae12eb5b7d7108ac88c9c
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:02:52 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303bf5efae12eb5b7d7108ac88c9c\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T10:02:53.180Z] Aug 04, 2025 10:02:53 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:02:53 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T10:08:35.419Z] Aug 04, 2025 10:08:35 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:08:35 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T10:08:35.460Z] Aug 04, 2025 10:08:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:08:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-04T10:08:35.489Z] Aug 04, 2025 10:08:35 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303028fb3b1fef7f99260a605bcf0
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:08:35 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303028fb3b1fef7f99260a605bcf0\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-08-04T10:08:36.395Z] Aug 04, 2025 10:08:36 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:08:36 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T10:08:55.404Z] Aug 04, 2025 10:08:55 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:08:55 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-08-04T10:09:42.228Z] Aug 04, 2025 10:09:42 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:09:42 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-04T10:17:51.548Z] Aug 04, 2025 10:17:51 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 10:17:51 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-04T11:17:52.152Z] Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-04T11:17:52.170Z] Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nAug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-04T11:17:52.175Z] Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 04, 2025 11:17:52 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-08-05T04:11:01.592Z] ----------------------------------------------------------------------
[debug] [2025-08-05T04:11:01.606Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/fsdlxfaxdgx27856x49qycgdsyx5jxd3-firebase-tools-14.11.2/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-08-05T04:11:01.608Z] CLI Version:   14.11.2
[debug] [2025-08-05T04:11:01.608Z] Platform:      linux
[debug] [2025-08-05T04:11:01.610Z] Node Version:  v20.19.1
[debug] [2025-08-05T04:11:01.611Z] Time:          Tue Aug 05 2025 04:11:01 GMT+0000 (Coordinated Universal Time)
[debug] [2025-08-05T04:11:01.611Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-08-05T04:11:04.121Z] openjdk version "21.0.7" 2025-04-15
OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-08-05T04:11:04.176Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-08-05T04:11:04.240Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-08-05T04:11:04.249Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-08-05T04:11:04.270Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-08-05T04:11:04.272Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-08-05T04:11:04.272Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/n1m2a7x1hx6vgvmanjin6yd0b16nafz0-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/n1m2a7x1hx6vgvmanjin6yd0b16nafz0-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-08-05T04:11:09.238Z] Aug 05, 2025 4:11:09 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 4:11:09 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-08-05T04:11:09.381Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-08-05T04:11:09.659Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T04:56:55.547Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T04:56:55.550Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isUser(userId) {\n      return isSignedIn() && request.auth.uid == userId;\n    }\n    \n    function getUserData(userId) {\n        return get(/databases/$(database)/documents/users/$(userId)).data;\n    }\n\n    function isAdmin() {\n      return isSignedIn() && getUserData(request.auth.uid).role == 'Admin';\n    }\n\n    function isTechnician() {\n      return isSignedIn() && getUserData(request.auth.uid).role == 'Technician';\n    }\n    \n    function isOwner(techId) {\n        return request.auth.uid == get(/databases/$(database)/documents/users/$(request.resource.data.tech_id)).auth.uid;\n    }\n\n    // Rules for 'users' collection\n    match /users/{userId} {\n      // Admins can read all user profiles.\n      // A user can read their own profile.\n      allow read: if isAdmin() || isUser(userId);\n      \n      // Admins can create/update any user profile.\n      // This is necessary for the TechnicianForm to work.\n      allow write: if isAdmin();\n      \n      // Do not allow users to be deleted from the app directly for safety.\n      // Deletion should be handled via Firebase Console or a dedicated admin tool.\n      allow delete: if false;\n    }\n\n    // Rules for 'technicians' collection\n    match /technicians/{techId} {\n      // Any authenticated user can read technician data (needed for maps, task lists, etc.)\n      allow read: if isSignedIn();\n      \n      // Only Admins can create, update, or delete technicians.\n      allow write: if isAdmin();\n    }\n    \n    // Rules for 'tasks' collection\n    match /tasks/{taskId} {\n      // Admins can read all tasks.\n      // Technicians can only read tasks assigned to them.\n      allow read: if isAdmin() || (isTechnician() && request.auth.uid == get(/databases/$(database)/documents/users/$(resource.data.tech_id)).auth.uid);\n\n      // Admins can create and update tasks.\n      // Technicians can update tasks (e.g. status), but not create or delete them.\n      allow create, update: if isAdmin();\n      allow update: if isTechnician() && request.auth.uid == get(/databases/$(database)/documents/users/$(resource.data.tech_id)).auth.uid;\n      \n      allow delete: if isAdmin();\n    }\n\n    // Rules for 'alerts' collection\n    match /alerts/{alertId} {\n      // Any authenticated user can view alerts.\n      allow read: if isSignedIn();\n      \n      // Alerts are created by the system (AI flow) or Admins.\n      // For simplicity, we allow any signed-in user to create them, but this could be locked down further.\n      allow write: if isSignedIn();\n      allow delete: if isAdmin();\n    }\n    \n    // Rules for 'infrastructure' and 'connections'\n    match /{collectionId}/{docId} where collectionId in ['infrastructure', 'connections'] {\n        // Any authenticated user can read network data for map visualization.\n        allow read: if isSignedIn();\n        \n        // Only Admins can modify the core network infrastructure.\n        allow write: if isAdmin();\n    }\n    \n    // Rules for 'materials' and 'assignments'\n    match /materials/{materialId} {\n        // Any authenticated user can read material stock levels.\n        allow read: if isSignedIn();\n        \n        // Only Admins can add/update/delete materials.\n        allow write: if isAdmin();\n    }\n\n    match /assignments/{assignmentId} {\n        // Admins can read all assignments.\n        // Technicians can read assignments made to them.\n        allow read: if isAdmin() || (isTechnician() && request.auth.uid == get(/databases/$(database)/documents/users/$(resource.data.technicianId)).auth.uid);\n        \n        // Admins can create/update/delete assignments.\n        // Technicians can create new assignments (requests).\n        allow create: if isSignedIn();\n        allow update, delete: if isAdmin();\n    }\n    \n    // Rules for 'referrals'\n    match /referrals/{referralId} {\n        // Admins can read all referrals.\n        // Technicians can read referrals they submitted.\n        allow read: if isAdmin() || (isTechnician() && request.auth.uid == get(/databases/$(database)/documents/users/$(resource.data.tech_id)).auth.uid);\n        \n        // Technicians can create referrals.\n        allow create: if isTechnician();\n        \n        // Admins can update (e.g., change status) or delete referrals.\n        allow update, delete: if isAdmin();\n    }\n    \n     // Rules for 'plans' collection\n    match /plans/{planId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n    }\n    \n    // Default deny all other access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T04:56:55.656Z] Aug 05, 2025 4:56:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 4:56:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T04:56:56.498Z] Aug 05, 2025 4:56:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 4:56:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-08-05T04:57:00.663Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T04:57:00.665Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":81,"column":11,"currentOffset":2810,"endOffset":2810},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":81,"column":35,"currentOffset":2834,"endOffset":2838},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":81,"column":35,"currentOffset":2834,"endOffset":2838},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":133,"column":1,"currentOffset":4750,"endOffset":4750},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:81:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:81:35 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:81:35 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:133:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T06:54:10.286Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T06:54:10.287Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check if a user is an Admin\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n    \n    // Helper function to check if a user is a Technician\n    function isTechnician() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';\n    }\n    \n    // Helper function to check if the request is from the user themselves\n    function requestIsFromUser(userId) {\n      return request.auth.uid == userId;\n    }\n    \n    // Users collection:\n    // Admins can read/write all user profiles.\n    // Authenticated users can only read their own profile.\n    match /users/{userId} {\n      allow read: if request.auth != null && (isAdmin() || requestIsFromUser(userId));\n      allow write: if isAdmin();\n    }\n    \n    // Technicians collection:\n    // Admins can read/write all.\n    // Authenticated users (Admins and Technicians) can read all technician data (e.g., for lists, maps).\n    match /technicians/{techId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow write: if isAdmin();\n    }\n\n    // Infrastructure, Connections, and Plans collections:\n    // These represent the core network map data.\n    // Admins can manage this data. Technicians need to read it for map display and tracing.\n    match /infrastructure/{deviceId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow write: if isAdmin();\n    }\n    \n    match /connections/{connId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow write: if isAdmin();\n    }\n    \n    match /plans/{planId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow write: if isAdmin();\n    }\n    \n    // Alerts collection:\n    // Admins can manage all alerts.\n    // Technicians can read all alerts.\n    // The AI flow (authenticated user) must be able to create alerts.\n    match /alerts/{alertId} {\n      allow read: if request.auth != null && (isAdmin() || isTechnician());\n      allow create: if request.auth != null; // Allows AI flow to create alerts\n      allow update, delete: if isAdmin();\n    }\n    \n    // Tasks collection:\n    // Admins can read/write all tasks.\n    // Technicians can read all tasks (to see team workload) but can only update their own.\n    match /tasks/{taskId} {\n      allow read: if request.auth != null && (isAdmin() || isTechnician());\n      allow create: if isAdmin();\n      allow update: if isAdmin() || (isTechnician() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n      allow delete: if isAdmin();\n    }\n    \n    // Materials and Assignments:\n    // Admins can manage all materials and assignments.\n    // Technicians need to read materials list and can create new assignment requests.\n    match /materials/{materialId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow write: if isAdmin();\n    }\n    \n    match /assignments/{assignmentId} {\n        allow read: if request.auth != null && (isAdmin() || isTechnician());\n        allow create: if isTechnician();\n        allow update, delete: if isAdmin();\n    }\n    \n    // Referrals collection:\n    // Admins can manage all referrals.\n    // Technicians can read their own referrals and create new ones.\n    match /referrals/{referralId} {\n      allow read: if request.auth != null && (isAdmin() || resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n      allow create: if isTechnician();\n      allow update, delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T06:54:10.337Z] Aug 05, 2025 6:54:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 6:54:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T06:54:10.468Z] Aug 05, 2025 6:54:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 6:54:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-08-05T06:54:11.241Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T06:54:11.242Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T06:55:09.422Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T06:55:09.422Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to get user data from the 'users' collection\n    function getUserData(uid) {\n      return get(/databases/$(database)/documents/users/$(uid)).data;\n    }\n\n    // Helper function to check if the user is an Admin\n    function isAdmin() {\n      return isAuthenticated() && getUserData(request.auth.uid).role == 'Admin';\n    }\n    \n    // Helper function to check if the user's account is active\n    function isNotBlocked() {\n        return isAuthenticated() && getUserData(request.auth.uid).isBlocked == false;\n    }\n\n    // Helper function to check if the user is a Technician\n    function isTechnician() {\n      return isAuthenticated() && isNotBlocked() && getUserData(request.auth.uid).role == 'Technician';\n    }\n\n    // Default deny all access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Admin Access: Admins can read and write everything.\n    // This is a broad but simple rule for administrative override.\n    match /{document=**} {\n      allow read, write: if isAdmin();\n    }\n    \n    // Technician Permissions\n\n    // Technicians can read all technicians' data (for lists, maps) but can't write.\n    match /technicians/{techId} {\n      allow read: if isTechnician();\n    }\n    \n    // Technicians can read all infrastructure data (for map display, etc) but cannot write.\n    match /infrastructure/{deviceId} {\n      allow read: if isTechnician();\n    }\n    \n     // Technicians can read all users' data (needed for name lookups etc.) but can't write.\n    match /users/{userId} {\n      allow read: if isTechnician();\n    }\n    \n    // Technicians can read all tasks, but can only update a task assigned to them.\n    match /tasks/{taskId} {\n      allow read: if isTechnician();\n      // Allow a tech to update a task if it is assigned to them\n      allow update: if isTechnician() && resource.data.tech_id == request.auth.uid;\n    }\n    \n    // Technicians can read all connections for map display\n    match /connections/{connId} {\n      allow read: if isTechnician();\n    }\n    \n    // Technicians can read all alerts\n    match /alerts/{alertId} {\n      allow read: if isTechnician();\n    }\n    \n    // Technicians can read all materials (to know what's available)\n    match /materials/{materialId} {\n      allow read: if isTechnician();\n    }\n\n    // Technicians can create new referrals and material requests (assignments)\n    match /referrals/{referralId} {\n        allow read: if isTechnician(); // Can read their own or all for admins (covered by admin rule)\n        allow create: if isTechnician();\n    }\n    \n    match /assignments/{assignmentId} {\n        allow read: if isTechnician();\n        allow create: if isTechnician(); // For submitting requests\n    }\n    \n    match /plans/{planId} {\n        allow read: if isTechnician();\n    }\n  }\n}"}]}}
[debug] [2025-08-05T06:55:09.442Z] Aug 05, 2025 6:55:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 6:55:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T06:55:10.085Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T06:55:10.092Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T06:55:49.511Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T06:55:49.511Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // --- Helper Functions ---\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return isAuth() && request.auth.uid == userId;\n    }\n    \n    function getUserRole() {\n        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;\n    }\n    \n    function isAdmin() {\n        return isAuth() && getUserRole() == 'Admin';\n    }\n\n    function isTechnician() {\n        return isAuth() && getUserRole() == 'Technician';\n    }\n\n    // --- Collection Rules ---\n\n    // Users can read their own profile. Admins can read/write any profile.\n    // Technicians can read other user profiles for names/roles but cannot write.\n    match /users/{userId} {\n      allow read: if isAuth(); // Admins and Technicians need to read user data for names etc.\n      allow write: if isAdmin();\n      allow create: if isAdmin();\n      allow update: if isAdmin() || isOwner(userId);\n    }\n    \n    // Technicians need to read all other technicians for context.\n    // Admins can manage the technician list.\n    match /technicians/{techId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    // Admins can manage everything.\n    // Technicians can only read infrastructure, connections, alerts, and materials.\n    match /{collection}/{docId} \n        where collection in ['infrastructure', 'connections', 'alerts', 'materials', 'plans'] {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    // Tasks can be read by any authenticated user.\n    // Admins can create/write any task.\n    // Technicians can only update tasks assigned to them.\n    match /tasks/{taskId} {\n        allow read: if isAuth();\n        allow create: if isAdmin();\n        // Allow update if admin OR if technician is the one assigned to the task.\n        allow update: if isAdmin() || (isTechnician() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n        allow delete: if isAdmin();\n    }\n\n    // Admins manage assignments.\n    // Technicians can create new \"Requested\" assignments.\n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        allow create: if isTechnician(); // Techs can request materials\n        allow write: if isAdmin(); // Admins approve/manage them\n    }\n\n    // Admins can manage all referrals.\n    // Technicians can create new referrals.\n    match /referrals/{referralId} {\n        allow read: if isAuth();\n        allow create: if isTechnician();\n        allow write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T06:55:49.526Z] Aug 05, 2025 6:55:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 6:55:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T06:55:49.761Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T06:55:49.762Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":47,"column":11,"currentOffset":1399,"endOffset":1399},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":9,"currentOffset":1430,"endOffset":1434},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":9,"currentOffset":1430,"endOffset":1434},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":80,"column":1,"currentOffset":2674,"endOffset":2674},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:47:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:48:9 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:48:9 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:80:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T06:58:14.612Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T06:58:14.613Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions to make rules more readable\n    function isAuth() {\n      return request.auth != null;\n    }\n    \n    function getRole() {\n        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;\n    }\n\n    function isAdmin() {\n      return isAuth() && getRole() == 'Admin';\n    }\n    \n    function isTechnician() {\n        return isAuth() && getRole() == 'Technician';\n    }\n\n    // Admins can read and write all data.\n    // Authenticated users (Admin or Tech) can read all data. This is necessary for pages\n    // that display combined information (e.g., maps, lists, dropdowns).\n    match /{document=**} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    // Technicians can only update tasks assigned to them.\n    match /tasks/{taskId} {\n        allow update: if isTechnician() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n    }\n\n    // Technicians can only create referrals and material requests (assignments).\n    match /referrals/{referralId} {\n        allow create: if isTechnician();\n    }\n\n    match /assignments/{assignmentId} {\n        allow create: if isTechnician();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T06:58:14.620Z] Aug 05, 2025 6:58:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 6:58:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T06:58:14.886Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T06:58:14.889Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T07:11:40.534Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T07:11:40.539Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper functions to make rules more readable\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function getUserData() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;\n    }\n\n    function isAdmin() {\n      return isAuth() && getUserData().role == 'Admin';\n    }\n\n    function isTechnician() {\n      return isAuth() && getUserData().role == 'Technician';\n    }\n    \n    function isOwner(techId) {\n      return isTechnician() && getUserData().id == techId;\n    }\n\n    // Admins can do anything.\n    match /{document=**} {\n      allow read, write: if isAdmin();\n    }\n    \n    // Authenticated users can read their own user profile.\n    // Technicians can read other user profiles for names/avatars.\n    // No one but an admin can create/delete/update other user profiles.\n    match /users/{userId} {\n      allow get: if isAuth();\n      allow list: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    // Technicians can read all data needed for their UI (maps, lists, etc.)\n    // but have very limited write permissions.\n    match /technicians/{techId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    match /tasks/{taskId} {\n      allow read: if isAuth();\n      // Allow a technician to update a task if it is assigned to them.\n      allow update: if isOwner(resource.data.tech_id);\n      allow create, delete: if isAdmin();\n    }\n    \n    match /alerts/{alertId} {\n      allow read: if isAuth();\n      allow write: if isAdmin(); // Or a trusted server/cloud function\n    }\n    \n    match /infrastructure/{deviceId} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    match /connections/{connId} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    match /materials/{materialId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        // Allow a technician to create a new assignment (material request)\n        allow create: if isTechnician();\n        allow update, delete: if isAdmin();\n    }\n    \n    match /referrals/{referralId} {\n        allow read: if isAuth();\n        // Allow a technician to create a new referral\n        allow create: if isTechnician();\n        allow update, delete: if isAdmin();\n    }\n    \n    match /plans/{planId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T07:11:40.553Z] Aug 05, 2025 7:11:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 7:11:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T07:11:40.886Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T07:11:40.887Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T07:14:24.228Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T07:14:24.229Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions to simplify rule logic\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    // Check if the authenticated user has the 'Admin' role in their user document\n    function isAdmin() {\n      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n\n    // Check if the authenticated user has the 'Technician' role\n    function isTechnician() {\n        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';\n    }\n    \n    // Check if the authenticated user is the owner of the document (based on UID)\n    function isOwner(userId) {\n      return isAuth() && request.auth.uid == userId;\n    }\n    \n    // =================================\n    //         Collection Rules\n    // =================================\n\n    // Users can read their own data to get their role. Admins can read/write all.\n    match /users/{userId} {\n      allow read: if isAuth() && (isOwner(userId) || isAdmin());\n      allow write: if isAdmin();\n    }\n    \n    // Technicians can be read by any authenticated user, but only written by Admins.\n    match /technicians/{techId} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    // Tasks can be read by any authenticated user.\n    // Creation/deletion by Admins only.\n    // Technicians can only update tasks assigned to them.\n    match /tasks/{taskId} {\n        allow read: if isAuth();\n        allow create, delete: if isAdmin();\n        allow update: if isAdmin() || (isTechnician() && request.resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n    }\n    \n    // Alerts can be read by any authenticated user.\n    // Written only by Admins (or a future server process).\n    match /alerts/{alertId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    // Infrastructure can be read by any authenticated user.\n    // Written only by Admins.\n    match /infrastructure/{infraId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    // Connections can be read by any authenticated user.\n    // Written only by Admins.\n    match /connections/{connId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    // Materials can be read by any authenticated user.\n    // Written only by Admins.\n    match /materials/{materialId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    // Assignments can be read by Admins. Technicians can read their own.\n    // Technicians can create new requests for themselves.\n    // Admins can update/delete any assignment.\n    match /assignments/{assignmentId} {\n        allow read: if isAdmin() || (isTechnician() && resource.data.technicianId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n        allow create: if isTechnician() && request.resource.data.technicianId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n        allow update, delete: if isAdmin();\n    }\n    \n    // Referrals can be read by Admins. Technicians can read their own.\n    // Technicians can create new referrals for themselves.\n    // Admins can update/delete any referral.\n    match /referrals/{referralId} {\n        allow read: if isAdmin() || (isTechnician() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n        allow create: if isTechnician() && request.resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n        allow update, delete: if isAdmin();\n    }\n\n    // Plans can be read by Admins only.\n    match /plans/{planId} {\n        allow read, write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T07:14:24.254Z] Aug 05, 2025 7:14:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 7:14:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T07:14:24.662Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T07:14:24.669Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T07:18:10.161Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T07:18:10.161Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions to make rules more readable and reusable.\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isAdmin() {\n      // An Admin user's role is stored in the 'users' collection,\n      // linked by their authentication UID.\n      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';\n    }\n\n    function isTechnician() {\n      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Technician';\n    }\n\n    function isOwner(userId) {\n      return isAuth() && request.auth.uid == userId;\n    }\n    \n    function isTechnicianAssignedToTask() {\n        let techId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id;\n        return resource.data.tech_id == techId;\n    }\n\n    // Admins have full access to everything.\n    // This rule provides a blanket override for all collections below.\n    match /{document=**} {\n      allow read, write: if isAdmin();\n    }\n    \n    // The 'users' collection stores roles and profile info.\n    // Any authenticated user can read profiles (e.g., to see names).\n    // Only the owner of the profile can update their own info. Admins can update any.\n    match /users/{userId} {\n      allow read: if isAuth();\n      allow update: if isOwner(userId);\n      // Create/Delete is handled by Admin rule and backend functions.\n    }\n    \n    // Technicians collection contains public info about technicians.\n    match /technicians/{techId} {\n        allow read: if isAuth();\n        // Technicians can't update their own profiles directly from this collection.\n        // All technician writes are managed by Admins.\n        allow write: if false; // Covered by Admin rule\n    }\n    \n    // Tasks can be read by any authenticated user (as technicians need to see all tasks on some views).\n    // Technicians can only update tasks assigned to them.\n    match /tasks/{taskId} {\n        allow read: if isAuth();\n        allow create: if false; // Only Admins can create tasks\n        allow update: if isTechnician() && isTechnicianAssignedToTask();\n        allow delete: if false; // Only Admins can delete\n    }\n\n    // Alerts can be read by any authenticated user.\n    // They are created by the AI fault detection flow (server-side), so client writes are disallowed except for Admins.\n    match /alerts/{alertId} {\n        allow read: if isAuth();\n        allow write: if false; // Covered by Admin rule\n    }\n    \n    // All users can read infrastructure data for the map and other displays.\n    // Only Admins can modify the infrastructure.\n    match /infrastructure/{deviceId} {\n        allow read: if isAuth();\n        allow write: if false; // Covered by Admin rule\n    }\n\n    // All users can read connections for drawing the map.\n    // Only Admins can modify connections.\n    match /connections/{connId} {\n        allow read: if isAuth();\n        allow write: if false; // Covered by Admin rule\n    }\n\n    // Materials are read-only for technicians.\n    // Only Admins can manage the materials stock.\n    match /materials/{materialId} {\n        allow read: if isAuth();\n        allow write: if false; // Covered by Admin rule\n    }\n\n    // Assignments can be read by any authenticated user.\n    // Technicians can create new requests (assignments).\n    // Only Admins can update/approve them.\n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        allow create: if isTechnician();\n        allow update, delete: if false; // Covered by Admin rule\n    }\n\n    // Referrals can be read by any authenticated user.\n    // Technicians can create new referrals.\n    // Only Admins can update the status of referrals.\n    match /referrals/{referralId} {\n        allow read: if isAuth();\n        allow create: if isTechnician();\n        allow update, delete: if false; // Covered by Admin rule\n    }\n\n    // Plans can be read by any authenticated user for displaying customer info on the map.\n    // Only Admins can modify plans.\n    match /plans/{planId} {\n        allow read: if isAuth();\n        allow write: if false; // Covered by Admin rule\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T07:18:10.174Z] Aug 05, 2025 7:18:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 7:18:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T07:18:10.325Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T07:18:10.326Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-05T07:21:09.471Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-05T07:21:09.483Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function getUserData(userId) {\n      return get(/databases/$(database)/documents/users/$(userId)).data;\n    }\n\n    function isAdmin() {\n      return isAuth() && getUserData(request.auth.uid).role == 'Admin';\n    }\n\n    function isTechnician() {\n        return isAuth() && getUserData(request.auth.uid).role == 'Technician';\n    }\n    \n    function isOwner(userId) {\n        return request.auth.uid == userId;\n    }\n\n    // Admins can read/write all data\n    match /{document=**} {\n      allow read, write: if isAdmin();\n    }\n    \n    // USERS collection\n    // Allow authenticated users to read any user profile (for name/avatar lookups)\n    // Allow users to update their own profile, but not change their role or ID\n    match /users/{userId} {\n      allow read: if isAuth();\n      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id && request.resource.data.role == resource.data.role;\n    }\n    \n    // TECHNICIANS collection\n    // Any authenticated user can read technician data (for maps, lists)\n    // Only admins can write\n    match /technicians/{techId} {\n        allow read: if isAuth();\n        // write is handled by admin rule\n    }\n    \n    // TASKS collection\n    // Any authenticated user can read tasks\n    // Technicians can only update tasks assigned to them\n    match /tasks/{taskId} {\n      allow read: if isAuth();\n      allow update: if isTechnician() && request.resource.data.tech_id == getUserData(request.auth.uid).id;\n       // create/delete is handled by admin rule\n    }\n\n    // ALERTS collection\n    // Allow authenticated users to read alerts\n    match /alerts/{alertId} {\n        allow read: if isAuth();\n        // create/write is handled by admin rule (and AI flows via service account)\n    }\n\n    // INFRASTRUCTURE & CONNECTIONS collections\n    // Allow authenticated users to read network data\n    match /infrastructure/{infraId} {\n        allow read: if isAuth();\n    }\n    match /connections/{connId} {\n        allow read: if isAuth();\n    }\n    \n    // MATERIALS & ASSIGNMENTS collections\n    // Allow authenticated users to read materials data\n    // Technicians can create new assignments (requests), but not modify them further\n    match /materials/{materialId} {\n        allow read: if isAuth();\n    }\n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        allow create: if isTechnician() && request.resource.data.technicianId == getUserData(request.auth.uid).id;\n    }\n\n    // REFERRALS collection\n    // Authenticated users can read their own referrals\n    // Technicians can create new referrals for themselves\n    match /referrals/{referralId} {\n        allow read: if isTechnician() && resource.data.tech_id == getUserData(request.auth.uid).id;\n        allow create: if isTechnician() && request.resource.data.tech_id == getUserData(request.auth.uid).id;\n    }\n\n    // PLANS collection\n    // Authenticated users can read plans\n    match /plans/{planId} {\n      allow read: if isAuth();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-05T07:21:09.533Z] Aug 05, 2025 7:21:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 05, 2025 7:21:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-05T07:21:09.774Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-05T07:21:09.779Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
