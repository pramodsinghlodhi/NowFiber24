[debug] [2025-08-14T07:03:35.899Z] ----------------------------------------------------------------------
[debug] [2025-08-14T07:03:35.904Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/4ba3nh7p56fsnidgr9jcqnpv4k7nwwrv-firebase-tools-14.12.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-08-14T07:03:35.904Z] CLI Version:   14.12.0
[debug] [2025-08-14T07:03:35.905Z] Platform:      linux
[debug] [2025-08-14T07:03:35.905Z] Node Version:  v20.19.1
[debug] [2025-08-14T07:03:35.905Z] Time:          Thu Aug 14 2025 07:03:35 GMT+0000 (Coordinated Universal Time)
[debug] [2025-08-14T07:03:35.905Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-08-14T07:03:36.966Z] openjdk version "21.0.7" 2025-04-15
OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-08-14T07:03:37.020Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-08-14T07:03:37.038Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-08-14T07:03:37.045Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-08-14T07:03:37.062Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-08-14T07:03:37.062Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-08-14T07:03:37.062Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/8srlj4j2m67g5852hw1ain98qzznyamj-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/8srlj4j2m67g5852hw1ain98qzznyamj-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-08-14T07:03:40.304Z] Aug 14, 2025 7:03:40 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 7:03:40 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-08-14T07:03:40.350Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-08-14T07:03:40.561Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-14T08:15:47.293Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-14T08:15:47.293Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // --- Helper Functions ---\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isUser(uid) {\n      return isAuth() && request.auth.uid == uid;\n    }\n    \n    // Checks for a custom claim on the user's auth token.\n    // This is set server-side and is the most reliable way to check for roles.\n    function isAdmin() {\n      return isAuth() && request.auth.token.role == 'Admin';\n    }\n\n    // --- Collection Rules ---\n\n    // Users can only read their own profile. Admins can read any profile.\n    // Only Admins can create/update/delete users (handled by server-side actions).\n    match /users/{userId} {\n      allow read: if isUser(userId) || isAdmin();\n      allow write: if isAdmin();\n    }\n\n    // Notifications are private to each user.\n    match /users/{userId}/notifications/{notificationId} {\n      allow read, write, delete: if isUser(userId);\n      // This allows the \"clear all\" functionality to work by querying the collection.\n      allow list: if isUser(userId);\n    }\n    \n    // Admins have full access to technicians. Authenticated users can read.\n    match /technicians/{techId} {\n      allow read: if isAuth();\n      allow list, write: if isAdmin();\n    }\n\n    // Admins have full access to infrastructure. Authenticated users can read.\n    match /infrastructure/{deviceId} {\n      allow read: if isAuth();\n      allow list, write: if isAdmin();\n    }\n\n    // Admins have full access to tasks. Authenticated users can read/query.\n    match /tasks/{taskId} {\n      allow read, list: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    // Admins have full access to alerts. Authenticated users can read/query.\n    match /alerts/{alertId} {\n      allow read, list: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    // Admins have full access to material assignments. Techs can read their own.\n    match /assignments/{assignmentId} {\n      allow get: if isAuth();\n      allow list: if isAdmin();\n      allow write: if isAdmin();\n    }\n\n    // Admins have full access to materials. Authenticated users can read.\n    match /materials/{materialId} {\n      allow read: if isAuth();\n      allow list, write: if isAdmin();\n    }\n\n    // Referrals can be created by any authenticated user (technicians).\n    // Only Admins can read the full list or update/delete them.\n    match /referrals/{referralId} {\n        allow read, list: if isAdmin();\n        allow create: if isAuth();\n        allow update, delete: if isAdmin();\n    }\n    \n    // Proof of Work can be created by any authenticated user.\n    // Only Admins can read/delete them.\n    match /proofOfWork/{proofId} {\n        allow read, list: if isAdmin();\n        allow create: if isAuth();\n        allow delete: if isAdmin();\n    }\n\n    // Contact submissions can be created by anyone.\n    // Only Admins can read/update/delete them.\n    match /contacts/{contactId} {\n        allow read, list, update, delete: if isAdmin();\n        allow create: if true;\n    }\n\n    // Plans are admin-only.\n    match /plans/{planId} {\n        allow read, list, write: if isAdmin();\n    }\n\n    // Connections are admin-only for now, but readable by all for map tracing.\n    match /connections/{connectionId} {\n        allow read: if isAuth();\n        allow list, write: if isAdmin();\n    }\n\n    // Settings are admin-only.\n    match /settings/live {\n        allow read, write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-14T08:15:47.334Z] Aug 14, 2025 8:15:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:15:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:15:48.181Z] Aug 14, 2025 8:15:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:15:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:15:51.490Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-14T08:15:51.491Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-14T08:19:17.438Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-14T08:19:17.438Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isAdmin() {\n      return request.auth.token.role == 'Admin';\n    }\n\n    match /users/{userId} {\n      allow read: if isAuth() && request.auth.uid == userId;\n      allow write: if isAdmin();\n      \n      // Allow user to access their own notifications\n      match /notifications/{notificationId} {\n        allow read, write, list, delete: if isAuth() && request.auth.uid == userId;\n      }\n    }\n\n    match /technicians/{techId} {\n      allow read, list: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    match /tasks/{taskId} {\n      allow read: if isAuth();\n      // Admins can list all tasks. Techs can only list tasks if they are querying by their own tech_id.\n      allow list: if isAdmin() || (request.query.where.to_list().size() > 0 && request.query.where.to_list()[0][1] == 'tech_id' && request.query.where.to_list()[0][2] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n      allow write: if isAdmin();\n    }\n    \n    match /alerts/{alertId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    match /materials/{materialId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        allow write, list: if isAdmin();\n    }\n    \n    match /referrals/{referralId} {\n        allow read: if isAuth();\n        allow write, list: if isAdmin();\n    }\n    \n    match /infrastructure/{infraId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n     match /connections/{connId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    match /proofOfWork/{proofId} {\n      allow read, list: if isAdmin();\n      allow create: if isAuth();\n      allow delete: if isAdmin();\n    }\n\n    match /settings/live {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    match /contacts/{contactId} {\n      // Allow anyone to submit the form\n      allow create;\n      // Only admins can read, update, or delete submissions\n      allow read, list, update, delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-14T08:19:17.454Z] Aug 14, 2025 8:19:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:19:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:19:17.772Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-14T08:19:17.774Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":33,"column":56,"currentOffset":897,"endOffset":903},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":33,"column":100,"currentOffset":941,"endOffset":947},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":33,"column":152,"currentOffset":993,"endOffset":999},"description":"Invalid function name: to_list.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:33:56 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:33:100 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:33:152 - WARNING Invalid function name: to_list. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-14T08:21:45.842Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-14T08:21:45.843Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isAdmin() {\n      return isAuth() && request.auth.token.role == 'Admin';\n    }\n\n    // A user can only access their own user document\n    match /users/{userId} {\n      allow read: if isAuth() && request.auth.uid == userId;\n      allow write: if isAdmin();\n\n      // Notifications are a subcollection of users\n      match /notifications/{notificationId} {\n        allow read, write, delete: if isAuth() && request.auth.uid == userId;\n        // Allow the owner of the notifications to list their own notifications\n        allow list: if isAuth() && request.auth.uid == userId;\n      }\n    }\n\n    // Admins can manage technicians. Technicians can read their own document.\n    match /technicians/{techId} {\n      allow read: if isAuth();\n      allow list: if isAdmin();\n      allow write: if isAdmin();\n    }\n    \n    // Admins can manage tasks. Technicians can query their own tasks and update them.\n    match /tasks/{taskId} {\n      allow get: if isAuth();\n      // Allow a list query if it's an admin OR if the query is filtering by the user's own tech_id\n      allow list: if isAdmin() || (isAuth() && request.query.where['tech_id'] == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n      allow create, delete: if isAdmin();\n      allow update: if isAdmin() || (isAuth() && resource.data.tech_id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id);\n    }\n    \n    // Admins can manage everything else. Authenticated users can read most things.\n    match /{collection}/{docId} {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-14T08:21:45.853Z] Aug 14, 2025 8:21:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:21:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:21:46.063Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-14T08:21:46.064Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-14T08:28:21.253Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-14T08:28:21.253Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isAdmin() {\n      return isAuth() && request.auth.token.role == 'Admin';\n    }\n\n    function isTechnician() {\n        return isAuth() && request.auth.token.role == 'Technician';\n    }\n    \n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      allow list, create, delete: if isAdmin();\n    }\n\n    match /technicians/{techId} {\n        allow read, list: if isAuth();\n        allow create, update, delete: if isAdmin();\n    }\n\n    match /tasks/{taskId} {\n        allow read: if isAuth();\n        allow create, update, delete: if isAdmin();\n        // Allow query if it's from an admin OR if the query is filtering by the user's own UID\n        allow list: if isAdmin() || (isTechnician() && request.auth.uid == request.query.where.tech_id);\n    }\n    \n    match /alerts/{alertId} {\n        allow read, list: if isAuth();\n        allow create, update, delete: if isAdmin();\n    }\n\n    match /infrastructure/{deviceId} {\n        allow read, list: if isAuth();\n        allow create, update, delete: if isAdmin();\n    }\n    \n    match /connections/{connectionId} {\n        allow read, list: if isAuth();\n        allow create, update, delete: if isAdmin();\n    }\n\n    match /materials/{materialId} {\n        allow read, list: if isAuth();\n        allow create, update, delete: if isAdmin();\n    }\n\n    match /assignments/{assignmentId} {\n        allow read, create: if isAuth();\n        allow list: if isAdmin() || (isTechnician() && request.auth.uid == request.query.where.tech_id);\n        allow update, delete: if isAdmin();\n    }\n\n    match /referrals/{referralId} {\n        allow read, create: if isAuth();\n        allow list: if isAdmin() || (isTechnician() && request.auth.uid == request.query.where.tech_id);\n        allow update, delete: if isAdmin();\n    }\n\n    match /proofOfWork/{proofId} {\n        allow read, create: if isAuth();\n        allow list, delete: if isAdmin();\n    }\n\n    match /settings/live {\n        allow read: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    match /contacts/{contactId} {\n        allow create: if true; // Allow anyone to submit the contact form\n        allow read, list, update, delete: if isAdmin();\n    }\n\n    // Notifications subcollection for each user\n    match /users/{userId}/notifications/{notificationId} {\n      allow read, list, update, delete: if request.auth.uid == userId;\n      allow create: if isAuth(); // Can be created by server actions\n    }\n  }\n}\n"}]}}
[debug] [2025-08-14T08:28:21.293Z] Aug 14, 2025 8:28:21 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:28:21 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:28:21.482Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-14T08:28:21.482Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-08-14T08:29:40.778Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-08-14T08:29:40.778Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Helper Functions\n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isUser(userId) {\n      return isAuth() && request.auth.uid == userId;\n    }\n    \n    function isAdmin() {\n      return isAuth() && request.auth.token.role == 'Admin';\n    }\n\n    // Collection: users\n    // Users can only read their own profile. Admins can read all profiles.\n    // Only the server (Admin SDK) can create/update/delete user profiles.\n    match /users/{userId} {\n      allow read: if isUser(userId) || isAdmin();\n      allow write: if isAdmin(); // Let admin block/unblock users\n      \n      // Notifications Subcollection\n      match /notifications/{notificationId} {\n        allow read, write, delete: if isUser(userId);\n      }\n    }\n    \n    // Collection: technicians\n    // Admins can manage technicians. Technicians can read all technician data for map view.\n    match /technicians/{techId} {\n      allow read, list: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    // Collection: tasks\n    // Admins can manage all tasks. Technicians can query their own tasks.\n    match /tasks/{taskId} {\n      allow read: if isAuth();\n      allow list: if isAdmin() || (isAuth() && request.query.where.to_list().size() > 0 && request.query.where.to_list()[0][1] == 'tech_id' && request.query.where.to_list()[0][2] == request.auth.uid);\n      allow create, update: if isAuth();\n      allow delete: if isAdmin();\n    }\n\n    // Collection: alerts\n    // All authenticated users can read and list alerts.\n    // Only the server (Admin SDK) can create/update/delete alerts.\n    match /alerts/{alertId} {\n      allow read, list: if isAuth();\n      allow write: if false; // Server-only\n    }\n    \n    // Collection: infrastructure & connections\n    // All authenticated users can read/list for the map. Admins can manage.\n    match /infrastructure/{deviceId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    match /connections/{connId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n\n    // Collection: materials & assignments\n    // Admins can manage materials. Technicians can read materials for requests.\n    match /materials/{materialId} {\n        allow read, list: if isAuth();\n        allow write: if isAdmin();\n    }\n    \n    match /assignments/{assignmentId} {\n        allow read: if isAuth();\n        allow list: if isAdmin() || (isAuth() && request.query.where.to_list().size() > 0 && request.query.where.to_list()[0][1] == 'technicianId' && request.query.where.to_list()[0][2] == request.auth.uid);\n        allow create: if isAuth();\n        allow update, delete: if isAdmin();\n    }\n\n    // Collection: referrals\n    // Admins can manage all referrals. Technicians can query their own.\n    match /referrals/{referralId} {\n        allow read: if isAuth();\n        allow list: if isAdmin() || (isAuth() && request.query.where.to_list().size() > 0 && request.query.where.to_list()[0][1] == 'tech_id' && request.query.where.to_list()[0][2] == request.auth.uid);\n        allow create: if isAuth();\n        allow update, delete: if isAdmin();\n    }\n    \n    // Collection: proofOfWork\n    // Admins can read/delete. Technicians can create.\n    match /proofOfWork/{proofId} {\n      allow read, list, delete: if isAdmin();\n      allow create: if isAuth();\n    }\n    \n    // Collection: contacts\n    // Anyone can create (submit form). Admins can read/update/delete.\n    match /contacts/{contactId} {\n        allow create: if true;\n        allow read, list, update, delete: if isAdmin();\n    }\n    \n    // Collection: plans\n    // Only server can access.\n     match /plans/{planId} {\n      allow read, write: if false;\n    }\n\n    // Collection: settings\n    // Only Admins can read/write the single settings document.\n    match /settings/live {\n        allow read, write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-08-14T08:29:40.801Z] Aug 14, 2025 8:29:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Aug 14, 2025 8:29:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-08-14T08:29:40.929Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-08-14T08:29:40.929Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":44,"column":68,"currentOffset":1317,"endOffset":1323},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":112,"currentOffset":1361,"endOffset":1367},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":164,"currentOffset":1413,"endOffset":1419},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":78,"column":70,"currentOffset":2557,"endOffset":2563},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":78,"column":114,"currentOffset":2601,"endOffset":2607},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":78,"column":171,"currentOffset":2658,"endOffset":2664},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":87,"column":70,"currentOffset":3022,"endOffset":3028},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":87,"column":114,"currentOffset":3066,"endOffset":3072},"description":"Invalid function name: to_list.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":87,"column":166,"currentOffset":3118,"endOffset":3124},"description":"Invalid function name: to_list.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:44:68 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:44:112 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:44:164 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:78:70 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:78:114 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:78:171 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:87:70 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:87:114 - WARNING Invalid function name: to_list. 
[warn] ⚠  firestore.rules:87:166 - WARNING Invalid function name: to_list. 
[info] ✔  firestore: Rules updated. 
